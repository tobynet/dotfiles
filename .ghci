
-- ref.http://dev.stephendiehl.com/hask/#ghci

-- :!chcp 65001
-- :set prompt "Î»: "
:set prompt "> "

:set +t
:set +s
:set +m

-- | To use Monad Comprehensions
--
-- e.g.
-- >>> [ x + y | x <- Just 1, y <- Just 2 ]
-- Just 3
:set -XMonadComprehensions

-- | To use Parallel List Comprehensions
--
-- e.g.
-- >>> [ x + y | x <- [1,2,3] | y <- [10,20,30] ]
-- [11,22,33]
:set -XParallelListComp

:def hlint const . return $ ":! hlint \"src\""
:def hoogle \s -> return $ ":! hoogle --count=15 \"" ++ s ++ "\""

import Control.Applicative
import Control.Monad
import Control.Concurrent
import Control.Concurrent.Async
import Control.Parallel

import Data.String
import Data.Char
import Data.List
import Data.Monoid
-- import Control.Monad.IO.Class

