putStr "Loading ~/.ghci ..."

-- ref.http://dev.stephendiehl.com/hask/#ghci

-- :!chcp 65001
:set prompt "> "
:set prompt2 "| "

-- For default prompt
-- For in multiline

-- Show help of function
:set +t
-- Allow multiline without using :{ and :}
:set +m

-- | To use Monad Comprehensions
--
-- e.g.
-- >>> [ x + y | x <- Just 1, y <- Just 2 ]
-- Just 3
:set -XMonadComprehensions

-- | To use Parallel List Comprehensions
--
-- e.g.
-- >>> [ x + y | x <- [1,2,3] | y <- [10,20,30] ]
-- [11,22,33]
:set -XParallelListComp

-- | for ALL
-- via https://www.schoolofhaskell.com/school/to-infinity-and-beyond/pick-of-the-week/guide-to-ghc-extensions/explicit-forall#explicitforalln  
:set -XExplicitForAll

-- | Support string literal as {String | Text | ByteString}
-- 
-- > :t "Text!!!" 
-- "Text!!!" :: Data.String.IsString a => a
-- 
-- > import qualified Data.Text.IO as T
-- T> T.putStrLn "Text!!!"
-- Text!!!
--
-- via https://www.schoolofhaskell.com/school/to-infinity-and-beyond/pick-of-the-week/guide-to-ghc-extensions/basic-syntax-extensions#overloadedstrings
:set -XOverloadedStrings

:def hlint const . return $ ":! hlint \"src\""

-- Show list of functions
:def hoogle \s -> return $ ":! hoogle --count=10 \"" ++ s ++ "\""

-- Show help of a function
:def doc \s -> return $ ":! hoogle --info \"" ++ s ++ "\""

import Control.Applicative
import Control.Monad
import Control.Concurrent
import Control.Concurrent.Async
import Control.Parallel

import Data.String
import Data.Char
import Data.List
import Data.Monoid
-- import Control.Monad.IO.Class

-- Show timing/memory
-- Set it at last line to suppress some printings of timing/memory
:set +s

putStrLn "done!"

